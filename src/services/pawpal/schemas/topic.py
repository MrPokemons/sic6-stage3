import secrets
from typing import Annotated, List, TypeAlias, Union, Optional
from typing_extensions import TypedDict
from pydantic import BaseModel, Field

from datetime import datetime

from ....utils.typex import EmotionType


### Math
class MathUserAnswerExtraction(BaseModel):
    result: int = Field(description="extract user answer for the appropriate question")


class MathUserAnswer(BaseModel):
    raw_answer: Annotated[
        str, "user pure answer, then parse to extraction for real result"
    ]
    extraction: MathUserAnswerExtraction


class MathQnA(BaseModel):
    sequence: List[int]
    question: Optional[Annotated[str, "generated by LLM"]] = None
    is_answered: bool = False
    user_answers: List[MathUserAnswer] = []

    @property
    def answer(self):
        return sum(self.sequence)

    @staticmethod
    def generate_sequence(length: int, min_val: int, max_val: int):
        return [
            secrets.randbelow(max_val - min_val + 1) + min_val for _ in range(length)
        ]

    def fmt_sequence(self):
        seq_str = ", ".join(
            f"\"{'' if i == 0 else ('+' if i > 0 else '-')}{i}\"" for i in self.sequence
        )
        return f"[{seq_str}]"


### Topic


class TopicParams(TypedDict):
    class TalkToMeParam(TypedDict):
        duration: Annotated[int, "in seconds"]

    class MathGameParam(TypedDict):
        total_question: int

    class SpellingGameParam(TypedDict):
        total_question: int

    class WouldYouRatherParam(TypedDict):
        duration: Annotated[int, "in seconds"]

    talk_to_me: TalkToMeParam
    math_game: MathGameParam
    spelling_game: SpellingGameParam
    would_you_rather: WouldYouRatherParam


class BaseExtractionTopic(BaseModel):
    overview: str = Field(
        description="Summarize the chat history, oriented to user's progress and achievement"
    )
    emotion: EmotionType = Field(
        description=f"Based on the user's response behaviour, analyze the user's overall emotion based on the provided list of emotions: {', '.join(EmotionType.__args__)}"
    )
    keypoints: List[str] = Field(
        description="List major event or behaviour for overall of the conversation, it can be achievement from the user or something that user need to know about themselve throughout the conversation"
    )


class TopicResults(BaseModel):
    class TalkToMeResult(BaseModel):
        class _Extraction(BaseExtractionTopic): ...

        extraction: _Extraction
        start_datetime: datetime
        modified_datetime: datetime

    class MathGameResult(BaseModel):
        class _Extraction(BaseExtractionTopic): ...

        extraction: _Extraction
        list_qna: List[MathQnA]
        start_datetime: datetime
        modified_datetime: datetime

    class SpellingGameResult(BaseModel): ...

    class WouldYouRatherResult(BaseModel): ...


TopicResultsType: TypeAlias = Union[
    TopicResults.TalkToMeResult,
    TopicResults.MathGameResult,
    TopicResults.SpellingGameResult,
    TopicResults.WouldYouRatherResult,
]
